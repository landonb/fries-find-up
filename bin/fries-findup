#!/bin/bash
# vim:tw=0:ts=2:sw=2:et:ft=sh:

VERSION=0.0.3

print_version_and_exit () {
  # Use hard coded name, not $0, which is 'bash' when file is sourced.
  >&2 echo "fries-findup version ${VERSION}"
  exit 0
}

print_help_and_exit () {
  >&2 echo 'Usage: fries-findup [-v|--version] [-h|--help] <name>'
  >&2 echo 'See `man fries-findup` for more help'
  exit 0
}

parse_first_positional () {
  local first_one=''
  local skip_opts=false
  while [[ "$1" != '' ]]; do
    if [[ "$1" == '--' ]]; then
      skip_opts=true
      shift
      continue
    elif ! ${skip_opts}; then
      case $1 in
        -v)
          print_version_and_exit
          ;;
        --version)
          print_version_and_exit
          ;;
        -h)
          print_help_and_exit
          ;;
        --help)
          print_help_and_exit
          ;;
      esac
    fi
    if [[ -z ${first_one} ]]; then
      first_one=$1
    fi
    shift
  done
  if [[ -z ${first_one} ]]; then
    >&2 echo 'Missing one of: <exact-name> | <start-directory> <exact-name> | <directory> <arg-to-`find`> <arg-to-`find`>...'
    exit 2
  fi
  echo "${first_one}"
}

# Walk up the path looking for a file with the matching name.
fries-findup () {
  # Note: `local var=$(cmd)` always returns local's status of 0, so
  #       declare first, and then set it, as two separate operations.
  local first_one
  first_one=$(parse_first_positional "${@}") || return $?

  # File path is empty if command already handled, e.g., -v, or -h, etc.
  [[ -z ${first_one} ]] && return

  # Shake off $first_one. Remainder is optional arguments to `find`.
  shift

  local filename=''
  local dirpath=''
  if [[ ${#} -eq 0 ]]; then
    # No more arguments, so not using `find`; looking for exact match.
    # Start searching from the directory relative to what's being sought.
    filename=$(basename -- "${first_one}")
    dirpath=$(dirname -- "${first_one}")
  else
    # 2 or 3+ args: first one is directory.
    dirpath=${first_one}
    # If just 2 args, second is filename; otherwise, 3+ args,
    # and we pass everything to `find`.
    if [[ ${#} -eq 1 ]]; then
      # User specified 2 args: directory to start from, and file to find.
      filename=$1
      shift
    fi
  fi

  # Deal only in full paths. Symlinks are okay
  # (hence not `pwd -P` or `readlink -f`).
  # 2018-03-05: Aha! I was seeing "ruby-2.3.3 is not installed."
  #   when running this command, and it's because rvm is complaining.
  #   When you cd to a dir an rvm cannot find the .ruby-version, e.g..
  #       ruby-2.3.3 is not installed.
  #       To install do: 'rvm install ruby-2.3.3'
  # Trash the whole message. We don't want to see that noise.
  #pushd ${dirpath} &> /dev/null
  # Why, oh why, does rvm write errors using >&6 file descriptor?
  #   I had to rummage in the blathering rvm source to figure this out.
  pushd "${dirpath}" &> /dev/null 6>&1
  dirpath=$(pwd)
  popd &> /dev/null

  # "Invursive path", i.e., opposite of recursive find.
  local invursive_path=''

  # We don't return things from file system root. Because safer?
  # (I.e., if you want something from /, you just get it.)
  while [[ ${dirpath} != '/' ]]; do
    if [[ ${#} -eq 0 ]]; then
      # User simply indicated a file to find. We can be dumb about it.
      if [[ -e ${dirpath}/${filename} ]]; then
        invursive_path="${dirpath}/${filename}"
        break
      fi
    else
      # Call `find` command with whatever gibberish user supplied.
      # MAYBE/2018-02-07: Add option, e.g., --limit, to stop early.
      find "${dirpath}" -maxdepth 1 -mindepth 1 "$@" || return
      # The find variant of this function acts on multiple ancestors
      # and allows arbitrary arguments to `find`, so we cannot sanely
      # determine a single invursive_path match to return. But `find`
      # should generate its own output, so we're totes okay.
    fi
    # Get the parent directory.
    # - If you want to follow symlinks:
    #  dirpath="$(readlink -f "${dirpath}"/..)"
    # - If you want to be literal (not follow symlinks) but not use dirname?:
    #  dirpath="$(realpath -s "${dirpath}"/..)"
    # - Easy answer:
    dirpath=$(dirname -- "${dirpath}")
  done

  if [[ ${#} -eq 0 ]]; then
    if [[ -n "${invursive_path}" ]]; then
      echo "${invursive_path}"
      return 0
    else
      return 1
    fi
  else
    return 0
  fi
}

main () {
  if [[ ${BASH_SOURCE[0]} != "$0" ]]; then
    export -f fries-findup
  else
    fries-findup "${@}"
  fi
}

main "${@}"

